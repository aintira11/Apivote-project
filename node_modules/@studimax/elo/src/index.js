"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _Elo_PERF, _Elo_kFactor, _Elo_initialRating;
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Elo rating system
 * @author Maxime Scharwath
 */
class Elo {
    constructor(options = {}) {
        var _b, _c;
        _Elo_kFactor.set(this, void 0);
        _Elo_initialRating.set(this, void 0);
        __classPrivateFieldSet(this, _Elo_kFactor, (_b = options.kFactor) !== null && _b !== void 0 ? _b : 32, "f");
        __classPrivateFieldSet(this, _Elo_initialRating, (_c = options.initialRating) !== null && _c !== void 0 ? _c : 1000, "f");
    }
    /**
     * Get initial rating
     */
    getInitialRating() {
        return __classPrivateFieldGet(this, _Elo_initialRating, "f");
    }
    /**
     * Get K-factor
     */
    getKFactor() {
        return __classPrivateFieldGet(this, _Elo_kFactor, "f");
    }
    /**
     * Calculates the probability to win based on the rating of the opponent.
     * @param Ra Elo rating of hero A.
     * @param Rb Elo rating of hero B.
     */
    calculatePerformance(Ra, Rb) {
        return {
            Ea: 1 / (1 + 10 ** ((Rb - Ra) / __classPrivateFieldGet(Elo, _a, "f", _Elo_PERF))),
            Eb: 1 / (1 + 10 ** ((Ra - Rb) / __classPrivateFieldGet(Elo, _a, "f", _Elo_PERF))),
        };
    }
    /**
     * Calculates the expected score of a hero based on the rating of the other hero.
     * @param Ra Elo rating of hero A.
     * @param Rb Elo rating of hero B.
     * @param S Expected score of hero A. (0 <= S <= 1)
     */
    calculateRating(Ra, Rb, S = 1) {
        const { Ea, Eb } = this.calculatePerformance(Ra, Rb);
        S = Math.min(Math.max(S, 0), 1);
        return {
            Ra: Ra + __classPrivateFieldGet(this, _Elo_kFactor, "f") * (S - Ea),
            Rb: Rb + __classPrivateFieldGet(this, _Elo_kFactor, "f") * (1 - S - Eb),
        };
    }
}
exports.default = Elo;
_a = Elo, _Elo_kFactor = new WeakMap(), _Elo_initialRating = new WeakMap();
_Elo_PERF = { value: 400 };
//# sourceMappingURL=index.js.map